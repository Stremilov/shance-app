basePath: /api/v1
definitions:
  handler.CreateProjectVacancyRequest:
    properties:
      description:
        type: string
      questions:
        items:
          type: string
        type: array
      technologies:
        description: id технологий
        items:
          type: integer
        type: array
      title:
        type: string
    required:
    - description
    - questions
    - technologies
    - title
    type: object
  handler.CreateTagRequest:
    properties:
      name:
        example: Тег
        type: string
    required:
    - name
    type: object
  handler.CreateTechnologyRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  handler.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  handler.InviteMemberRequest:
    properties:
      email:
        example: user@example.com
        type: string
      role:
        example: member
        type: string
    required:
    - email
    - role
    type: object
  handler.LoginRequest:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: password123
        type: string
    required:
    - email
    - password
    type: object
  handler.ProjectMemberResponse:
    properties:
      email:
        example: user@example.com
        type: string
      first_name:
        example: Иван
        type: string
      id:
        example: 1
        type: integer
      last_name:
        example: Иванов
        type: string
      role:
        example: member
        type: string
    type: object
  handler.ProjectResponse:
    properties:
      created_at:
        example: "2024-03-20T12:00:00Z"
        type: string
      description:
        example: Описание проекта
        type: string
      id:
        example: 1
        type: integer
      name:
        example: Новый проект
        type: string
      photo:
        example:
        - '[''photo1.jpg'''
        - ' ''photo2.jpg'']'
        items:
          type: string
        type: array
      subtitle:
        example: Подзаголовок проекта
        type: string
      tags:
        example:
        - tag1
        - tag2
        items:
          type: string
        type: array
      title:
        example: Заголовок проекта
        type: string
      user:
        $ref: '#/definitions/handler.UserResponse'
      user_id:
        example: 1
        type: integer
    type: object
  handler.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  handler.RegisterRequest:
    properties:
      city:
        example: Moscow
        type: string
      country:
        example: Russia
        type: string
      email:
        example: user@example.com
        type: string
      first_name:
        example: John
        type: string
      last_name:
        example: Doe
        type: string
      password:
        example: password123
        minLength: 6
        type: string
      phone:
        example: "+79001234567"
        type: string
      role:
        example: user
        type: string
      tags:
        example:
        - tag1
        - tag2
        items:
          type: string
        type: array
    required:
    - email
    - first_name
    - last_name
    - password
    type: object
  handler.TagResponse:
    properties:
      id:
        example: 1
        type: integer
      name:
        example: Тег
        type: string
    type: object
  handler.TokenResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  handler.UpdateProjectRequest:
    properties:
      description:
        example: Новое описание
        type: string
      name:
        example: Обновленный проект
        type: string
      photo:
        example:
        - '[''new_photo1.jpg'''
        - ' ''new_photo2.jpg'']'
        items:
          type: string
        type: array
      subtitle:
        example: Новый подзаголовок
        type: string
      tags:
        example:
        - new_tag1
        - new_tag2
        items:
          type: string
        type: array
      title:
        example: Новый заголовок
        type: string
    type: object
  handler.UpdateTagRequest:
    properties:
      name:
        example: Обновленный тег
        type: string
    type: object
  handler.UpdateUserRequest:
    properties:
      city:
        example: Санкт-Петербург
        type: string
      description:
        example: Новая роль
        type: string
      name:
        example: Новое имя
        type: string
      photo:
        example:
        - new_photo1.jpg
        - ' new_photo2.jpg'
        items:
          type: string
        type: array
      subtitle:
        example: Новый номер телефона
        type: string
      tags:
        example: РА СИ Я
        type: string
      title:
        example: Новая фамилия
        type: string
    type: object
  handler.UserResponse:
    properties:
      email:
        example: ivan@example.com
        type: string
      first_name:
        example: Иван
        type: string
      id:
        example: 1
        type: integer
      last_name:
        example: Иванов
        type: string
    type: object
  models.SwaggerProject:
    properties:
      description:
        type: string
      end_date:
        type: string
      id:
        type: integer
      name:
        type: string
      photo:
        type: string
      start_date:
        type: string
      status:
        type: string
      subtitle:
        type: string
      title:
        type: string
      user_id:
        type: integer
    type: object
  models.SwaggerProjectVacancy:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      project_id:
        type: integer
      technology_names:
        items:
          type: string
        type: array
      title:
        type: string
    type: object
  models.SwaggerUser:
    properties:
      city:
        example: New York
        type: string
      country:
        example: USA
        type: string
      created_at:
        example: "2024-03-12T15:04:05Z"
        type: string
      email:
        example: user@example.com
        type: string
      first_name:
        example: John
        type: string
      id:
        example: 1
        type: integer
      last_name:
        example: Doe
        type: string
      phone:
        example: "+1234567890"
        type: string
      role:
        example: user
        type: string
      updated_at:
        example: "2024-03-12T15:04:05Z"
        type: string
    type: object
  models.Technology:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
host: localhost:8000
info:
  contact: {}
  description: API для управления проектами
  title: Shance API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Аутентифицирует пользователя и возвращает refresh token
      parameters:
      - description: Данные для входа
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Вход в систему
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Обновляет пару токенов используя refresh token
      parameters:
      - description: Refresh token
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.TokenResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Обновление токенов
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Создает нового пользователя и возвращает refresh token
      parameters:
      - description: Данные для регистрации
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Регистрация нового пользователя
      tags:
      - auth
  /projects:
    get:
      consumes:
      - application/json
      description: Возвращает список всех проектов
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.SwaggerProject'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Получение списка проектов
      tags:
      - projects
    post:
      consumes:
      - multipart/form-data
      description: Создает новый проект для текущего пользователя
      parameters:
      - description: Название проекта
        in: formData
        name: name
        required: true
        type: string
      - description: Заголовок
        in: formData
        name: title
        type: string
      - description: Подзаголовок
        in: formData
        name: subtitle
        type: string
      - description: Описание
        in: formData
        name: description
        type: string
      - description: Теги (можно несколько, tags=tag1&tags=tag2)
        in: formData
        name: tags
        type: string
      - description: Фотографии (можно несколько)
        in: formData
        name: photo
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.SwaggerProject'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Создание нового проекта
      tags:
      - projects
  /projects/{id}:
    delete:
      consumes:
      - application/json
      description: Удаляет проект по указанному ID
      parameters:
      - description: ID проекта
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Удаление проекта
      tags:
      - projects
    get:
      consumes:
      - application/json
      description: Возвращает информацию о проекте по его ID
      parameters:
      - description: ID проекта
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SwaggerProject'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Получение информации о проекте
      tags:
      - projects
    put:
      consumes:
      - application/json
      description: Обновляет данные существующего проекта
      parameters:
      - description: ID проекта
        in: path
        name: id
        required: true
        type: integer
      - description: Данные проекта
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.UpdateProjectRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.ProjectResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Обновление проекта
      tags:
      - projects
  /projects/{id}/invite:
    post:
      consumes:
      - application/json
      description: Приглашает пользователя в проект по email
      parameters:
      - description: ID проекта
        in: path
        name: id
        required: true
        type: integer
      - description: Данные приглашения
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.InviteMemberRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.ProjectMemberResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Приглашение участника в проект
      tags:
      - projects
  /projects/{id}/members:
    get:
      consumes:
      - application/json
      description: Возвращает список всех участников проекта
      parameters:
      - description: ID проекта
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handler.ProjectMemberResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Получение списка участников проекта
      tags:
      - projects
  /projects/{id}/vacancies:
    get:
      consumes:
      - application/json
      description: Получает список вакансий, привязанных к проекту
      parameters:
      - description: ID проекта
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.SwaggerProjectVacancy'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Получить вакансии проекта
      tags:
      - vacancies
  /projects/{id}/vacancy:
    post:
      consumes:
      - application/json
      description: Создаёт новую вакансию, привязанную к проекту. Вопросы передаются
        как массив строк в поле questions.
      parameters:
      - description: ID проекта
        in: path
        name: id
        required: true
        type: integer
      - description: Данные вакансии (title, description, technologies - id технологий,
          questions - массив строк)
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.CreateProjectVacancyRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.SwaggerProjectVacancy'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Создать вакансию для проекта
      tags:
      - vacancies
  /projects/search:
    get:
      consumes:
      - application/json
      description: Возвращает список проектов, названия которых содержат поисковый
        запрос
      parameters:
      - description: Поисковый запрос
        in: query
        name: q
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handler.ProjectResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Поиск проектов по названию
      tags:
      - projects
  /tags:
    get:
      consumes:
      - application/json
      description: Возвращает список всех тегов
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handler.TagResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Получение списка тегов
      tags:
      - tags
    post:
      consumes:
      - application/json
      description: Создает новый тег в системе
      parameters:
      - description: Данные тега
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.CreateTagRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handler.TagResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Создание нового тега
      tags:
      - tags
  /tags/{id}:
    delete:
      consumes:
      - application/json
      description: Удаляет тег по его ID
      parameters:
      - description: ID тега
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Удаление тега
      tags:
      - tags
    put:
      consumes:
      - application/json
      description: Обновляет информацию о теге
      parameters:
      - description: ID тега
        in: path
        name: id
        required: true
        type: integer
      - description: Данные тега
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.UpdateTagRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.TagResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Обновление тега
      tags:
      - tags
  /tags/search:
    get:
      consumes:
      - application/json
      description: Возвращает список тегов, соответствующих поисковому запросу
      parameters:
      - description: Поисковый запрос
        in: query
        name: q
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handler.TagResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Поиск тегов
      tags:
      - tags
  /technologies:
    post:
      consumes:
      - application/json
      description: Создаёт новую технологию
      parameters:
      - description: Данные технологии
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.CreateTechnologyRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Technology'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Создать технологию
      tags:
      - technologies
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Возвращает информацию о пользователе по его ID
      parameters:
      - description: ID пользователя
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SwaggerUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Получение информации о пользователе
      tags:
      - users
  /users/{user_id}/projects:
    get:
      consumes:
      - application/json
      description: Возвращает список проектов текущего пользователя
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handler.ProjectResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Получение проектов пользователя
      tags:
      - users
  /users/me:
    get:
      consumes:
      - application/json
      description: Возвращает информацию о текущем авторизованном пользователе
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SwaggerUser'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Получение информации о текущем пользователе
      tags:
      - users
    patch:
      consumes:
      - application/json
      description: Обновляет данные авторизованного пользователя
      parameters:
      - description: Данные пользователя
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SwaggerUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Обновление данных текущего пользователя
      tags:
      - users
schemes:
- http
swagger: "2.0"
